How do I find all the rewrite rules given my scheme?
Only save minimal rewrite rules.
Exclude all constructive examples of rules or excluide direclty in the formula

Is there a way to detect if a rule is within a program. Basically determine if a rule matches
I could construct direct "does this match" code embedded in the formula. There absolutely is.

If I added those exclusions, I do not think I need to enumerate either 
  the input permutations
  nor the program permutations.
  nor the commutative permutations 
As long as it was all 'enumerated' in the matching function

Symbolic pattern matching to construct a constrained search

I cannot merely perform symbolic pattern matching. I need a full covering in order to exclude it.

So the issue I am thinking is:
Lets say I have a very simple rewrite rule ie a.mul -> b.mul
    Do I really want to exclude any rewrite rule like a*(b+c) -> a*b + a*c.
    I do not.
    In order for this to work, I must do full symbolic instruction selection
        What this means is find a set of rewrite rules whose sum matches all the ops.a
        then allocate ops to each pattern.
        Create the inter-pattern constraints

I need to think how plausable this actually is.
    I think it actually might be plausable. I should get up early to try and implement it.
    Doing the constructive version (to create all the exclusions) would probably be very helpful.
There is an interesting sub problem I also need to solve. Basically how can I use a multi-subset of
the existing rewrite rules
I could literally code that up in SMT. That is a pretty simple sub problem.

The real question is how to encode all the matches

a.sub(x, y) -> b.sub(x, y)

In X
In Y
a.sub(?,?)


The ordering of searching for rules is well defined. Do all (1,1) before any (1,2). Do any (1,2) before (2,2) etc...
    This can be easily proven

Issue:
    If the pattern itself contains independent dags?
        This is technically possible but only when one side is a single dag and the other are independent dags
        This is only possible if one side is not independent from the other side



TODO Issues to deal with
    BUG:
        using two different rules causes assertion error (mul,add)
    -(mul, mul) -> (mul, mul) does not get properly excluded
        This is because I am not leveraging multiplication properties
    add1 -> (sub, sub, sub, -1) creates a weird Rule
    I should try out better filtering methods.
      What if I literally used the solver to show that it is false?
    QOL: Cache the variables in the Synth query. Do not create new ones ever new class
        DONE
    Given certain rules I can safely not search for certain other 'bigger' rules
    discover and assign commutative rules
    QOL: print rules to DOT







(I had this idea while 15mg high + 2 beers deep)
